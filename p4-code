// Question and answer data array
const data = [
    {
      question: "Q1",
      answer: "A1",
    },
    {
      question: "Q2",
      answer: "A2",
    },
    {
      question: "Q3",
      answer: "A3",
    },
  ];
  
  // Export statement must be below data declaration - no hoisting with const
  module.exports = {
    data,
  };


// PART 4 need to add a statement to load data from p4-data,js, assigned to a constant variable

const {data} = require("./p4-data.js")
const fastify = require("fastify")();
const fs = require("fs");

function getQuestions(){
  const x = [];
  for (const obj of data){
    x.push(obj.question);
  }
return x
}

function getAnswers(){
  const x = [];
  for (const obj of data){
    x.push(obj.answer);
  }
return x
}

function getQuestionsAnswers(){
  const x = [];
  for (const obj of data){
    x.push(obj);
  }
return x
}

function getQuestions(number = ""){

}

function getAnswers(number = ""){

}

funtion getQuestionsAnswers(number = ""){

}

/*****************************
  Module function testing
******************************/
function testing(category, ...args) {
    console.log(`\n** Testing ${category} **`);
    console.log("-------------------------------");
    for (const o of args) {
      console.log(`-> ${category}${o.d}:`);
      console.log(o.f);
    }
  }
  
  // Set a constant to true to test the appropriate function
  const testGetQs = false;
  const testGetAs = false;
  const testGetQsAs = false;
  const testGetQ = false;
  const testGetA = false;
  const testGetQA = false;
  const testAdd = false;      // Extra credit
  const testUpdate = false;   // Extra credit
  const testDelete = false;   // Extra credit

module.exports = {
    getQuestions,
    getAnswers,
    getQuestionsAnswers,
    getQuestion,
    getAnswer,
    getQuestionAnswer,

};

  // getQuestions()
if (testGetQs) {
    testing("getQuestions", { d: "()", f: getQuestions() });
  }
  
  // getAnswers()
  if (testGetAs) {
    testing("getAnswers", { d: "()", f: getAnswers() });
  }
  
  // getQuestionsAnswers()
  if (testGetQsAs) {
    testing("getQuestionsAnswers", { d: "()", f: getQuestionsAnswers() });
  }
  
  // getQuestion()
  if (testGetQ) {
    testing(
      "getQuestion",
      { d: "()", f: getQuestion() },      // Extra credit: +1
      { d: "(0)", f: getQuestion(0) },    // Extra credit: +1
      { d: "(1)", f: getQuestion(1) },
      { d: "(4)", f: getQuestion(4) }     // Extra credit: +1
    );
  }
  
  // getAnswer()
  if (testGetA) {
    testing(
      "getAnswer",
      { d: "()", f: getAnswer() },        // Extra credit: +1
      { d: "(0)", f: getAnswer(0) },      // Extra credit: +1
      { d: "(1)", f: getAnswer(1) },
      { d: "(4)", f: getAnswer(4) }       // Extra credit: +1
    );
  }
  
  // getQuestionAnswer()
  if (testGetQA) {
    testing(
      "getQuestionAnswer",
      { d: "()", f: getQuestionAnswer() },    // Extra credit: +1
      { d: "(0)", f: getQuestionAnswer(0) },  // Extra credit: +1
      { d: "(1)", f: getQuestionAnswer(1) },
      { d: "(4)", f: getQuestionAnswer(4) }   // Extra credit: +1
    );
  }
  
  const fastify = require("fastify")();
const {getQuestions,
    getAnswers,
    getQuestionsAnswers,
    getQuestion,
    getAnswer,
    getQuestionAnswer} = require("./p4-module.js");
const {data} = require("./p4-data.js")

fastify.get("/cit/question", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "questions": [
            "Q1",
            "Q2",
            "Q3"
        ]
    });
});

fastify.get("/cit/answer", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "answers": [
            "A1",
            "A2",
            "A3"
        ]
    });
});

fastify.get("/cit/questionanswer", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "questions_answers": [
            {
                "question": "Q1",
                "answer": "A1"
            },
            {
                "question": "Q2",
                "answer": "A2"
            },
            {
                "question": "Q3",
                "answer": "A3"
            }
        ]
    });
});

fastify.get("/cit/question/:number", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "question": "Q1",
        "number": 1
    });
});

fastify.get("/cit/answer/:number", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "answer": "A2",
        "number": 2
    });
});

fastify.get("/cit/questionanswer/:number", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "",
        "statusCode": 200,
        "question": "Q3",
        "answer": "A3",
        "number": 3
    });
});

fastify.get("*", (request, reply) => {reply
    .code(200)
    .header("Content-Type", "application/json; charset=utf-8")
    .send({
        "error": "Route not found",
        "statusCode": 404
    });
});

// Start server and listen to requests using Fastify
const listenIP = "localhost";const listenPort = 8080;
fastify.listen(listenPort, listenIP, (err, address) => {if (err)
     {console.log(err);process.exit(1);}console.log(`Server listening on ${address}`);
    });
